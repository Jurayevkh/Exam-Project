// <auto-generated />
using System;
using GeneralMotors.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GeneralMotors.Infrastructure.Migrations
{
    [DbContext(typeof(GeneralMotorDbContext))]
    [Migration("20231205134207_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GeneralMotors.Domain.Entities.CarTypes.CarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CarTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Kupe"
                        },
                        new
                        {
                            Id = 3,
                            Type = "universal"
                        },
                        new
                        {
                            Id = 4,
                            Type = "hetchbek"
                        },
                        new
                        {
                            Id = 5,
                            Type = "liftbek"
                        },
                        new
                        {
                            Id = 6,
                            Type = "limuzin"
                        },
                        new
                        {
                            Id = 7,
                            Type = "kabriolet"
                        },
                        new
                        {
                            Id = 8,
                            Type = "pikap"
                        },
                        new
                        {
                            Id = 9,
                            Type = "SUV"
                        });
                });

            modelBuilder.Entity("GeneralMotors.Domain.Entities.Cars.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CarImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CarTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fuel_Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarTypeId")
                        .IsUnique();

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("GeneralMotors.Domain.Entities.Cars.CarClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ClientId");

                    b.ToTable("CarClient");
                });

            modelBuilder.Entity("GeneralMotors.Domain.Entities.Clients.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("GeneralMotors.Domain.Entities.Dillers.Diller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dillers");
                });

            modelBuilder.Entity("GeneralMotors.Domain.Entities.SuperAdmins.SuperAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SuperAdmins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Rustambek Jo'rayev",
                            Password = "qwerty123",
                            UserName = "rustam"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bahriddin Abdusalomov",
                            Password = "BaxaKriminal",
                            UserName = "baxa_tashkentskiy"
                        });
                });

            modelBuilder.Entity("GeneralMotors.Domain.Entities.Cars.Car", b =>
                {
                    b.HasOne("GeneralMotors.Domain.Entities.CarTypes.CarType", "CarType")
                        .WithOne("Car")
                        .HasForeignKey("GeneralMotors.Domain.Entities.Cars.Car", "CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarType");
                });

            modelBuilder.Entity("GeneralMotors.Domain.Entities.Cars.CarClient", b =>
                {
                    b.HasOne("GeneralMotors.Domain.Entities.Cars.Car", "Car")
                        .WithMany("CarClients")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralMotors.Domain.Entities.Clients.Client", "Client")
                        .WithMany("CarClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("GeneralMotors.Domain.Entities.CarTypes.CarType", b =>
                {
                    b.Navigation("Car")
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralMotors.Domain.Entities.Cars.Car", b =>
                {
                    b.Navigation("CarClients");
                });

            modelBuilder.Entity("GeneralMotors.Domain.Entities.Clients.Client", b =>
                {
                    b.Navigation("CarClients");
                });
#pragma warning restore 612, 618
        }
    }
}
